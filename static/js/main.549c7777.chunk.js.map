{"version":3,"sources":["helpers/random.js","Components/DiceItem.js","Components/DiceRoll.js","Components/DiceTotal.js","App.js","serviceWorker.js","index.js"],"names":["getRandom","max","Math","floor","random","DiceItem","props","die","roller","className","role","tabIndex","onClick","src","alt","aria-hidden","DiceRoll","rolls","removeADie","map","roll","i","d","key","onContextMenu","e","preventDefault","id","value","DiceTotal","mod","length","reduce","a","b","dice","App","defaultValue","useState","JSON","parse","localStorage","getItem","state","setState","useEffect","setItem","stringify","usePersistedState","savedRolls","setSavedRolls","setRolls","setMod","rollDice","arr","forEach","newRoll","push","Date","getTime","resetAndRoll","modifier","process","savedRoll","filter","save","removeASave","name","prompt","parseInt","newSavedRoll","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.549c7777.chunk.js","sourcesContent":["const getRandom = (max) => {\n  return Math.floor(Math.random() * (max) + 1);\n}\n\nexport default getRandom","import React from 'react';\n\nfunction DiceItem(props) {\n  const { die, roller } = props;\n  return (\n    <div \n      className=\"dice-item\" \n      role=\"button\" \n      tabIndex=\"0\" \n      onClick={() => {\n        roller([die]);\n      }\n    }>\n      <img src={`/dice/d${die}.png`} alt={`Roll a d${die}`} className=\"dice-image\"/>\n      <p className={`dice-text ${die === 4 ? `dice-text--d${die}` : \"\"}`} aria-hidden=\"true\">{\"D\" + die}</p>\n    </div>\n  );\n}\n\nexport default DiceItem;","import React from 'react';\n\nfunction DiceRoll(props){\n  const { rolls, removeADie } = props;\n  return (\n    <>\n    {rolls.map((roll, i) => {\n      return (\n      <div \n        className={`die die-${roll.d}`} \n        key={i}\n        tabIndex=\"0\"\n        onContextMenu={(e) => {\n          e.preventDefault();\n          removeADie(roll.id);\n        }}\n        onClick={(e) => {\n          e.preventDefault();\n          removeADie(roll.id);\n        }}\n      >\n        <span>D{roll.d}</span>\n        <p className=\"die-result\">{roll.value}</p>\n      </div>\n      )\n    })}\n    </>\n  )\n}\n\nexport default DiceRoll;","import React from 'react';\n\nfunction DiceTotal(props){\n  const { rolls, mod } = props;\n  if (rolls.length>0) {\n    return (\n      <>\n        <p>{mod ? `Mod: ${mod}` : \"\"}</p>\n        <strong>Total:{rolls.map(roll => roll.value).reduce((a,b) => a+b) + mod}</strong>\n      </>\n    )\n  }\n  return null;\n}\n\nexport default DiceTotal;","import React, { useState, useEffect } from 'react';\nimport getRandom from './helpers/random';\nimport DiceItem from './Components/DiceItem';\nimport DiceRoll from './Components/DiceRoll';\nimport DiceTotal from './Components/DiceTotal';\n\nconst dice = [4,6,8,10,12,20,100];\n\nfunction usePersistedState(key, defaultValue) {\n  const [state, setState] = useState(\n    () => {\n      try { \n        return JSON.parse(localStorage.getItem(key)) || defaultValue \n      } catch { \n        return defaultValue\n      }\n    }\n  );\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n  return [state, setState];\n}\n\nfunction App() {\n  const [savedRolls, setSavedRolls] = usePersistedState('savedRolls', []);\n  const [rolls, setRolls] = useState([]);\n  const [mod, setMod] = useState(0);\n\n  const rollDice = (dice) => {\n    const [...arr] = rolls;\n    dice.forEach(\n      die => {\n        const newRoll = getRandom(die);\n        arr.push({\n          'id': `d${die}:${newRoll}@${new Date().getTime()}`,\n          'd': die,\n          'value': newRoll,\n        });\n        setRolls(arr);\n      }\n    )\n  }\n\n  const resetAndRoll = (dice, modifier) => {\n    const arr = [];\n    dice.forEach(\n      die => {\n        const newRoll = getRandom(die);\n        arr.push({\n          'id': `d${die}:${newRoll}@${new Date().getTime()}`,\n          'd': die,\n          'value': newRoll,\n        });\n        setRolls(arr);\n        setMod(modifier ?? 0);\n      }\n    )\n  };\n\n  const removeADie = (id) => {\n    const [...arr] = rolls;\n    setRolls(arr.filter((die) => die.id !== id));\n  }\n\n  const removeASave = (id) => {\n    const [...arr] = savedRolls;\n    setSavedRolls(arr.filter((save) => save.id !== id));\n  }\n\n  return (\n    <>\n      <header className=\"header\">\n        <img src={process.env.PUBLIC_URL + '/logo192.png'} alt=\"Dice logo\" className=\"header-logo\"></img>\n        <h1 className=\"header-text h1\">D&D Dice</h1>\n      </header>\n\n      <div className=\"container\">\n        <main className=\"main\">\n          <div className=\"filterScroller\">\n            {\n              savedRolls.map((savedRoll, i) => {\n                return <div\n                  className=\"filterScroller-item\" \n                  key={i}\n                  role=\"button\" \n                  tabIndex=\"0\"\n                  onClick={ () => {\n                    resetAndRoll(savedRoll.dice, savedRoll.mod);\n                  }}\n                  onContextMenu={(e) => {\n                    e.preventDefault();\n                    removeASave(savedRoll.id);\n                  }}\n                >\n                  {savedRoll.name}\n                </div>\n              })\n            }\n          </div>\n          <div className=\"diceTotal\">\n            { rolls ? <DiceTotal rolls={rolls} mod={mod}/>: \"\" }\n          </div>\n          <div className=\"diceGrid\">\n            { rolls ? <DiceRoll rolls={rolls} removeADie={removeADie}  /> : \"\" }\n          </div>\n          <div className=\"main-footer\" tabIndex=\"-1\">\n            <div className=\"dice\">\n              {dice.map((die, i) => <DiceItem die={die} key={i} roller={rollDice} />)}\n            </div>\n            <div className=\"modifier\">\n            <button className=\"mod\" tabIndex=\"0\" onClick={() => {\n              const modifier = prompt(\"Please enter a modifier\");\n              if (modifier){\n                setMod(parseInt(modifier, 10))\n              };\n            }}>+/-</button>\n            </div>\n            <button \n              className=\"roll\"\n              tabIndex=\"0\"\n              onClick={ () =>{\n                resetAndRoll(rolls.map(roll => roll.d), mod);\n              }}\n            >\n              Roll\n            </button>\n            <button className=\"save\" tabIndex=\"0\"onClick={() => {\n              const [...arr] = savedRolls;\n              const name = prompt(\"Please enter the name\");\n              if (name) {\n                const newSavedRoll = {\"id\": `@${new Date().getTime()}`, \"name\": name, \"mod\": mod?mod:0, \"dice\":rolls?rolls.map(roll => roll.d):[]};\n                arr.push(newSavedRoll)\n                setSavedRolls(arr)\n              }\n            }}>\n              Save As\n            </button>\n          </div>\n        </main>\n      </div>\n\n      <footer className=\"footer\">\n        <code className=\"footer-text\">Made by David Sint</code>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}